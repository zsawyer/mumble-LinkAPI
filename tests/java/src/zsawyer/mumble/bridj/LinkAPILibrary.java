package zsawyer.mumble.bridj;

import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.Array;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Runtime;

/**
 * Wrapper for library <b>LinkAPI</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a>.<br>
 * For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a
 * href="http://bridj.googlecode.com/">BridJ</a> .
 *
 *
 * The wrapped library is a generic interface to provide positional audio
 * information to mumble which depends on the "Mumble Link Plugin" ("Link")
 * v1.2.0
 *
 * Note that all update...(...) methods will increment uiTick and reinitialize
 * the memory structure if the lock was lost (unlinked).
 *
 * CONCURRENCY WARNING:
 * All methods are non-synchronized! Race conditions are likely to happen.
 * Especially when calling getters in sequence, data writes to the shared memory
 * can happen in between the read sequence.
 * DO NOT rely upon a sequence of functions to work on the same "uiTick".
 * Currently the memory does not provide the means to synchronize and ensure
 * that all data are coherently relating to the same tick/each other.
 * The context_len is not guaranteed to belong to the context retrieved
 * immediately before or after thereof.
 *
 *
 * For more information about the different data that can be updated see
 * http://mumble.sourceforge.net/Link
 *
 *
 * @author cleaned up by zsawyer, 2013
 */
@Library("LinkAPI")
@Runtime(CRuntime.class)
public class LinkAPILibrary {

	static {
		BridJ.addNativeLibraryAlias("LinkAPI", "libLinkAPI");
		BridJ.addNativeLibraryAlias("LinkAPI", "LinkAPI64");
		BridJ.addNativeLibraryAlias("LinkAPI", "libLinkAPI64");
		BridJ.register();
	}

	/**
	 * error codes hinting at the root cause of a failure
	 */
	public enum LINKAPI_ERROR_CODE implements IntValuedEnum<LINKAPI_ERROR_CODE> {

		/** no error */
		LINKAPI_ERROR_CODE_NO_ERROR(0),
		/** win32 specific: OpenFileMappingW failed to return a handle */
		LINKAPI_ERROR_CODE_WIN32_NO_HANDLE(1),
		/** win32 specific: MapViewOfFile failed to return a structure */
		LINKAPI_ERROR_CODE_WIN32_NO_STRUCTURE(2),
		/** unix specific: shm_open returned a negative integer */
		LINKAPI_ERROR_CODE_UNIX_NO_HANDLE(3),
		/** unix specific: mmap failed to return a structure */
		LINKAPI_ERROR_CODE_UNIX_NO_STRUCTURE(4),
		/** shared memory was not initialized */
		LINKAPI_ERROR_CODE_NO_MEMORY_WAS_INITIALIZED(5),
		/** the provided context length was out of bounds */
		LINKAPI_ERROR_CODE_CONTEXT_LENGTH_EXCEEDED(6);

		LINKAPI_ERROR_CODE(long value) {
			this.value = value;
		}
		public final long value;

		public long value() {
			return this.value;
		}

		public Iterator<LINKAPI_ERROR_CODE> iterator() {
			return Collections.singleton(this).iterator();
		}

		public static IntValuedEnum<LINKAPI_ERROR_CODE> fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	public static final int LINKAPI_MAX_IDENTITY_LENGTH = 256;
	public static final int LINKAPI_MAX_NAME_LENGTH = 256;
	public static final int LINKAPI_MAX_CONTEXT_LENGTH = 256;
	public static final int LINKAPI_VECTOR_LENGTH = 3;
	public static final int LINKAPI_UI_VERSION_UNLINK = 0;
	public static final int LINKAPI_MAX_DESCRIPTION_LENGTH = 2048;

	public static class LINKAPI_LINKED_MEMORY extends StructObject {

		@Field(0)
		public int uiVersion() {
			return this.io.getIntField(this, 0);
		}

		@Field(0)
		public LINKAPI_LINKED_MEMORY uiVersion(int uiVersion) {
			this.io.setIntField(this, 0, uiVersion);
			return this;
		}

		@Field(1)
		public int uiTick() {
			return this.io.getIntField(this, 1);
		}

		@Field(1)
		public LINKAPI_LINKED_MEMORY uiTick(int uiTick) {
			this.io.setIntField(this, 1, uiTick);
			return this;
		}

		/** C type : float[3] */
		@Array({3})
		@Field(2)
		public Pointer<Float> fAvatarPosition() {
			return this.io.getPointerField(this, 2);
		}

		/** C type : float[3] */
		@Array({3})
		@Field(3)
		public Pointer<Float> fAvatarFront() {
			return this.io.getPointerField(this, 3);
		}

		/** C type : float[3] */
		@Array({3})
		@Field(4)
		public Pointer<Float> fAvatarTop() {
			return this.io.getPointerField(this, 4);
		}

		/** C type : wchar_t[256] */
		@Array({256})
		@Field(5)
		public Pointer<Character> name() {
			return this.io.getPointerField(this, 5);
		}

		/** C type : float[3] */
		@Array({3})
		@Field(6)
		public Pointer<Float> fCameraPosition() {
			return this.io.getPointerField(this, 6);
		}

		/** C type : float[3] */
		@Array({3})
		@Field(7)
		public Pointer<Float> fCameraFront() {
			return this.io.getPointerField(this, 7);
		}

		/** C type : float[3] */
		@Array({3})
		@Field(8)
		public Pointer<Float> fCameraTop() {
			return this.io.getPointerField(this, 8);
		}

		/** C type : wchar_t[256] */
		@Array({256})
		@Field(9)
		public Pointer<Character> identity() {
			return this.io.getPointerField(this, 9);
		}

		@Field(10)
		public int context_len() {
			return this.io.getIntField(this, 10);
		}

		@Field(10)
		public LINKAPI_LINKED_MEMORY context_len(int context_len) {
			this.io.setIntField(this, 10, context_len);
			return this;
		}

		/** C type : unsigned char[256] */
		@Array({256})
		@Field(11)
		public Pointer<Byte> context() {
			return this.io.getPointerField(this, 11);
		}

		/** C type : wchar_t[2048] */
		@Array({2048})
		@Field(12)
		public Pointer<Character> description() {
			return this.io.getPointerField(this, 12);
		}

		public LINKAPI_LINKED_MEMORY() {
			super();
		}

		public LINKAPI_LINKED_MEMORY(Pointer pointer) {
			super(pointer);
		}
	};

	/**
	 * initialize the linked memory
	 * and set the name and description
	 *
	 * it corresponds to initMumble() defined here:
	 * http://mumble.sourceforge.net/Link
	 * but also sets the name and description as this should only needed to be
	 * set once
	 *
	 * @param name	       the display name of the application which links with
	 *                       mumble (i.e. L"TestLink")
	 * @param description	a text stating the purpose of this link
	 * @param uiVersion	  no description available (this should usually be set
	 *                       to 2)
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE initialize(wchar_t[256], wchar_t[2048], int)</code><br>
	 * <i>native declaration : line 156</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> initialize(
			Pointer<Character> name, Pointer<Character> description,
			int uiVersion);

	/**
	 * forcefully unlinks the plugin instantly
	 *
	 * this function directly circumvents the timeout wait of the link plugin
	 *
	 * this effect is undone when calling a commit...(...)-method or
	 * {@link #initialize(org.bridj.Pointer, org.bridj.Pointer, int)}
	 */
	/*
	 * Original signature :
	 * <code>void unlinkMumble()</code><br>
	 * <i>native declaration : line 168</i>
	 */
	native public static void unlinkMumble();

	/**
	 * Notifies the plugin that the data is up-to-date. commit...(...)-functions
	 * call this method at the end.
	 *
	 * This is to prevent a timeout which causes the plugin to automatically
	 * unlink.
	 * It will also re-link if the link has previously been lost ("relock").
	 *
	 * @return	an error code, see {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commit()</code><br>
	 * <i>native declaration : line 180</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commit();

	/**
	 * sets and commits the identity
	 *
	 * Notice: The identity does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a
	 * game.
	 *
	 * see {@link #setIdentity(org.bridj.Pointer) } for details
	 *
	 * @param identity	unique id of the user in a given context
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 *
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitIdentity(wchar_t[256])</code><br>
	 * <i>native declaration : line 195</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitIdentity(
			Pointer<Character> identity);

	/**
	 * get the client's identity
	 *
	 * see {@link #setIdentity(org.bridj.Pointer) } for details
	 *
	 * @return the client's identity
	 */
	/*
	 * Original signature :
	 * <code>wchar_t* getIdentity()</code><br>
	 * <i>native declaration : line 203</i>
	 */
	native public static Pointer<Character> getIdentity();

	/**
	 * set the identity only
	 *
	 * Notice: The identity does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a
	 * game.
	 *
	 * Identity should contain a string which uniquely identifies the player in
	 * the given context. This is usually satisfied by the in-game player name
	 * or the players ID (player-/connection-ID on the server or a global ID).
	 *
	 * Additionally the identity can contain any additional information about
	 * the player that might be interesting for the mumble server.
	 *
	 * We recommend using an easily parseable format like JSON or CSV for
	 * encoding the information but this is up to the game. Remember that the
	 * link structures only allow for limited characters of identity data.
	 *
	 * @param identity	unique id of the user in a given context
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setIdentity(wchar_t[256])</code><br>
	 * <i>native declaration : line 227</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setIdentity(
			Pointer<Character> identity);

	/**
	 * sets and commits the context
	 *
	 * Notice: The context does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a
	 * game.
	 *
	 * see {@link #setContext(org.bridj.Pointer, int) } for details
	 *
	 * @param context	    a generic context
	 * @param context_len	the length of the context (number of array elements)
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitContext(unsigned char[256], int)</code><br>
	 * <i>native declaration : line 243</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitContext(
			Pointer<Byte> context, int context_len);

	/**
	 * the length of the context (number of valid array elements retrieved).
	 *
	 * This cannot exceed {@link #LINKAPI_MAX_CONTEXT_LENGTH}.
	 *
	 * @return the length of the current context
	 */
	/*
	 * Original signature :
	 * <code>int getContextLen()</code><br>
	 * <i>native declaration : line 254</i>
	 */
	native public static int getContextLen();

	/**
	 * getter for the client's context
	 *
	 * see {@link #setContext(java.nio.ByteBuffer, int) } for details
	 *
	 * @return the client's context
	 */
	/*
	 * Original signature :
	 * <code>char* getContext()</code><br>
	 * <i>native declaration : line 263</i>
	 */
	native public static Pointer<Byte> getContext();

	/**
	 * sets the context
	 *
	 * Notice: The context does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a
	 * game.
	 *
	 * The context string is used to determine which users on a Mumble server
	 * should hear each other positionally. If context between two mumble user
	 * does not match the positional audio data is stripped server-side and
	 * voice will be received as non-positional.
	 *
	 * Accordingly the context should only match for players on the same server
	 * in the same game on the same map. Whether to include things like team in
	 * this string depends on the game itself. When in doubt err on the side of
	 * including less. This gives more flexibility later on.
	 *
	 * @param context	    a generic context
	 * @param context_len	the length of the context (number of array elements)
	 *                       {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setContext(unsigned char[], int)</code><br>
	 * <i>native declaration : line 288</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setContext(
			Pointer<Byte> context, int context_len);

	/**
	 * sets and commits the identity AND context
	 *
	 * Notice: The identity and/or context does not need to be updated every
	 * single frame. It shouldn't change more than a few times per second if at
	 * all during a game.
	 *
	 * see {@link #setIdentity(org.bridj.Pointer) } and
	 * {@link #setContext(org.bridj.Pointer, int) } for detailed information
	 *
	 * @param identity	   unique id of the user
	 * @param context	    a generic context
	 * @param context_len	the length of the context (number of array elements)
	 *                       {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitIdentityAndContext(wchar_t[256], unsigned char[256], int)</code><br>
	 * <i>native declaration : line 307</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitIdentityAndContext(
			Pointer<Character> identity, Pointer<Byte> context, int context_len);

	/**
	 * sets the identity AND context
	 *
	 * Notice: The identity and/or context does not need to be updated every
	 * single frame. It shouldn't change more than a few times per second if at
	 * all during a game.
	 *
	 * see {@link #setIdentity(org.bridj.Pointer) } and
	 * {@link #setContext(org.bridj.Pointer, int) } for detailed informations
	 *
	 * @param identity	   unique id of the user
	 * @param context	    a generic context
	 * @param context_len	the length of the context (number of array elements)
	 *                       {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setIdentityAndContext(wchar_t[], unsigned char[], int)</code><br>
	 * <i>native declaration : line 329</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setIdentityAndContext(
			Pointer<Character> identity, Pointer<Byte> context, int context_len);

	/**
	 * sets and commits the display name of the application currently linked
	 * with mumble
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * see {@link #setName(java.nio.CharBuffer)} for details
	 *
	 * @param name	the display name of the application which links with mumble
	 *                (i.e. L"TestLink")
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitName(wchar_t[256])</code><br>
	 * <i>native declaration : line 344</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitName(
			Pointer<Character> name);

	/**
	 * the display name of the application currently linked with mumble
	 *
	 * see {@link #setName(java.nio.CharBuffer)} for details
	 *
	 * @return application name
	 */
	/*	 * Original signature :
	 * <code>wchar_t* getName()</code><br>
	 * <i>native declaration : line 352</i>
	 */
	native public static Pointer<Character> getName();

	/**
	 * sets only the display name of the application currently linked with
	 * mumble
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * this name is shown in the mumble interface to indicate which plugin's
	 * positional audio is being used (i.e. used for the "XXX linked." message
	 * in the mumble log)
	 *
	 * @param name	the display name of the application which links with mumble
	 *                (i.e. L"TestLink")
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setName(wchar_t[256])</code><br>
	 * <i>native declaration : line 369</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setName(
			Pointer<Character> name);

	/**
	 * sets and commits the application's description
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * see {@link #setDescription(org.bridj.Pointer) } for details
	 *
	 * @param description	a text stating the purpose of this link
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitDescription(wchar_t[2048])</code><br>
	 * <i>native declaration : line 384</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitDescription(
			Pointer<Character> description);

	/**
	 * the linked application's description
	 *
	 * see {@link #setDescription(java.nio.CharBuffer)} for details
	 *
	 * @return a text stating the purpose of this link
	 */
	/*
	 * Original signature :
	 * <code>wchar_t* getDescription()</code><br>
	 * <i>native declaration : line 392</i>
	 */
	native public static Pointer<Character> getDescription();

	/**
	 * sets only the application's description
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * this is the text to explain the plugin and its purpose
	 *
	 * @param description	a text stating the purpose of this link
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 *
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setDescription(wchar_t[2048])</code><br>
	 * <i>native declaration : line 407</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setDescription(
			Pointer<Character> description);

	/**
	 * updates and commits the avatar and camera vectors
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * @param fAvatarPosition	Position of the avatar.
	 * @param fAvatarFront	   Unit vector pointing out of the avatar's eyes.
	 * @param fAvatarTop	     Unit vector pointing out of the top of the
	 *                           avatar's head.
	 * @param fCameraPosition	Position of the camera.
	 * @param fCameraFront	   Unit vector pointing out of the camera's lense.
	 * @param fCameraTop	     Unit vector pointing out of the camera's top.
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitVectors(float[3], float[3], float[3], float[3], float[3], float[3])</code><br>
	 * <i>native declaration : line 425</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitVectors(
			Pointer<Float> fAvatarPosition, Pointer<Float> fAvatarFront,
			Pointer<Float> fAvatarTop, Pointer<Float> fCameraPosition,
			Pointer<Float> fCameraFront, Pointer<Float> fCameraTop);

	/**
	 * sets avatar and camera vectors
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * @param fAvatarPosition	Position of the avatar.
	 * @param fAvatarFront	   Unit vector pointing out of the avatar's eyes.
	 * @param fAvatarTop	     Unit vector pointing out of the top of the
	 *                           avatar's head.
	 * @param fCameraPosition	Position of the camera.
	 * @param fCameraFront	   Unit vector pointing out of the camera's lense.
	 * @param fCameraTop	     Unit vector pointing out of the camera's top.
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setVectors(float[3], float[3], float[3], float[3], float[3], float[3])</code><br>
	 * <i>native declaration : line 449</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setVectors(
			Pointer<Float> fAvatarPosition, Pointer<Float> fAvatarFront,
			Pointer<Float> fAvatarTop, Pointer<Float> fCameraPosition,
			Pointer<Float> fCameraFront, Pointer<Float> fCameraTop);

	/**
	 * updates and commits avatar AND camera vectors with the same values
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * see
	 * {@link #setVectorsAvatarAsCamera(org.bridj.Pointer, org.bridj.Pointer, org.bridj.Pointer)}
	 * for details
	 *
	 * @param fAvatarPosition	Position of the avatar and camera.
	 * @param fAvatarFront	   Unit vector pointing out of the camera/avatar's
	 *                           eyes.
	 * @param fAvatarTop	     Unit vector pointing out of the top of the
	 *                           avatar's head/camera's top.
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitVectorsAvatarAsCamera(float[3], float[3], float[3])</code><br>
	 * <i>native declaration : line 472</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitVectorsAvatarAsCamera(
			Pointer<Float> fAvatarPosition, Pointer<Float> fAvatarFront,
			Pointer<Float> fAvatarTop);

	/**
	 * sets avatar AND camera vectors with the same values
	 *
	 * this simply reuses the given vectors for the camera
	 *
	 * short cut function to use when the camera of the game/program is not
	 * independent of the avatar
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * see the respective single vector setters for details
	 *
	 * @param fAvatarPosition	Position of the avatar and camera.
	 * @param fAvatarFront	   Unit vector pointing out of the camera/avatar's
	 *                           eyes.
	 * @param fAvatarTop	     Unit vector pointing out of the top of the
	 *                           avatar's head/camera's top.
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setVectorsAvatarAsCamera(float[3], float[3], float[3])</code><br>
	 * <i>native declaration : line 497</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setVectorsAvatarAsCamera(
			Pointer<Float> fAvatarPosition, Pointer<Float> fAvatarFront,
			Pointer<Float> fAvatarTop);

	/**
	 * The position of the avatar
	 *
	 * location of the avatar or avatar's head where it is located in the 3D
	 * game world
	 *
	 * @return a 3D vector
	 */
	/*
	 * Original signature :
	 * <code>float* getAvatarPosition()</code><br>
	 * <i>native declaration : line 510</i>
	 */
	native public static Pointer<Float> getAvatarPosition();

	/**
	 * sets the position of the avatar
	 *
	 * location of the avatar or avatar's head where it is located in the 3D
	 * game world
	 *
	 * Using the head's position is preferred. This in particular applies when
	 * the head is not at the origin of the avatar model coordinate space. E.g.
	 * if
	 * the origin is at the feet of the model the sound will be perceived as
	 * coming from the feet instead of the head.
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setAvatarPosition(float, float, float)</code><br>
	 * <i>native declaration : line 528</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setAvatarPosition(
			float x, float y, float z);

	/**
	 * Unit vector pointing out of the avatar's eyes
	 *
	 * indicates the direction the avatar or avatar's head is pointing at
	 *
	 * @return a 3D vector (look vector)
	 */
	/*
	 * Original signature :
	 * <code>float* getAvatarFront()</code><br>
	 * <i>native declaration : line 538</i>
	 */
	native public static Pointer<Float> getAvatarFront();

	/**
	 * sets unit vector pointing out of the avatar's eyes
	 *
	 * indicates the direction the avatar or avatar's head is pointing at
	 *
	 * Note: this vector should be perpendicular to the top vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setAvatarFront(float, float, float)</code><br>
	 * <i>native declaration : line 553</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setAvatarFront(
			float x, float y, float z);

	/**
	 * Unit vector pointing out of the top of the avatar's head
	 *
	 * indicates the direction that the top of the avatar or
	 * avatar's head is pointing at
	 *
	 * @return a 3D vector (the avatar's up vector)
	 */
	/*
	 * Original signature :
	 * <code>float* getAvatarTop()</code><br>
	 * <i>native declaration : line 564</i>
	 */
	native public static Pointer<Float> getAvatarTop();

	/**
	 * sets unit vector pointing out of the top of the avatar's head
	 *
	 * indicates the direction that the top of the avatar or
	 * avatar's head is pointing at
	 *
	 * Note: this vector should be perpendicular to the front vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setAvatarTop(float, float, float)</code><br>
	 * <i>native declaration : line 580</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setAvatarTop(
			float x, float y, float z);

	/**
	 * The position of the camera
	 *
	 * location of the camera where it is located in the 3D game world
	 *
	 * @return a 3D vector
	 */
	/*
	 * Original signature :
	 * <code>float* getCameraPosition()</code><br>
	 * <i>native declaration : line 590</i>
	 */
	native public static Pointer<Float> getCameraPosition();

	/**
	 * sets the position of the camera
	 *
	 * location of the camera where it is located in the 3D game world
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setCameraPosition(float, float, float)</code><br>
	 * <i>native declaration : line 603</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setCameraPosition(
			float x, float y, float z);

	/**
	 * Unit vector pointing out of the front/lens of the camera
	 *
	 * indicates the direction the camera is pointing at
	 *
	 * @return a 3D vector (look vector)
	 */
	/*
	 * Original signature :
	 * <code>float* getCameraFront()</code><br>
	 * <i>native declaration : line 613</i>
	 */
	native public static Pointer<Float> getCameraFront();

	/**
	 * sets unit vector pointing out of the front/lens of the camera
	 *
	 * indicates the direction the camera is pointing at
	 *
	 * Note: this vector should be perpendicular to the top vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setCameraFront(float, float, float)</code><br>
	 * <i>native declaration : line 628</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setCameraFront(
			float x, float y, float z);

	/**
	 * Unit vector pointing out of the top of the camera
	 *
	 * indicates the direction that the top of the camera is pointing at
	 *
	 * @return a 3D vector (the camera's up vector)
	 */
	/*
	 * Original signature :
	 * <code>float* getCameraTop()</code><br>
	 * <i>native declaration : line 638</i>
	 */
	native public static Pointer<Float> getCameraTop();

	/**
	 * Unit vector pointing out of the top of the camera
	 *
	 * indicates the direction that the top of the camera is pointing at
	 *
	 * Note: this vector should be perpendicular to the front vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setCameraTop(float, float, float)</code><br>
	 * <i>native declaration : line 653</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setCameraTop(
			float x, float y, float z);

	/**
	 * Original signature :
	 * <code>int getUiVersion()</code><br>
	 * <i>native declaration : line 656</i>
	 */
	native public static int getUiVersion();

	/**
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setUiVersion(int)</code><br>
	 * <i>native declaration : line 658</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setUiVersion(
			int version);

	/**
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitUiVersion(int)</code><br>
	 * <i>native declaration : line 660</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitUiVersion(
			int version);

	/**
	 * tick counter which is used to tell if updates to the shared memory occur
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * @return the last tick number
	 */
	/*
	 * Original signature :
	 * <code>DWORD getUiTick()</code><br>
	 * <i>native declaration : line 671</i>
	 */
	native public static int getUiTick();

	/**
	 * sets the tick counter which is used to tell if updates to the shared
	 * memory occured
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * If the plugin is already unlinked updating this value does not re-link,
	 * for this to happen uiVersion needs to be updated too.
	 * Use
	 * <code>commitUiTick(...)</code> to clean-up the linked memory and
	 * enforce a re-link.
	 *
	 * @param tick the tick number to set
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setUiTick(DWORD)</code><br>
	 * <i>native declaration : line 688</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setUiTick(
			int tick);

	/**
	 * set and commit the tick counter which is used to tell if updates to the
	 * shared memory occured
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * @param tick the tick number to set
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE commitUiTick(DWORD)</code><br>
	 * <i>native declaration : line 700</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> commitUiTick(
			int tick);

	/**
	 * directly manipulate the entire linked memory at once
	 *
	 * IMPORTANT: Note that you should also update uiTick yourself, else a
	 * timeout will occur and your data will not be read. Subsequently calling
	 * the commit()-function once will not help when uiTick is always set to the
	 * same value.
	 *
	 * Notice: Parts of this does not need to be updated every single frame.
	 * Please use the more directly appropriate commit...(...) functions
	 * instead.
	 *
	 * @param source data structure which is to be copied
	 *
	 * @return an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_ERROR_CODE setData(LINKAPI_LINKED_MEMORY*)</code><br>
	 * <i>native declaration : line 718</i>
	 */
	native public static IntValuedEnum<LinkAPILibrary.LINKAPI_ERROR_CODE> setData(
			Pointer<LinkAPILibrary.LINKAPI_LINKED_MEMORY> source);

	/**
	 * the entire shared memory for direct access
	 *
	 * @return a pointer to the shared memory structure
	 */
	/*
	 * Original signature :
	 * <code>LINKAPI_LINKED_MEMORY* getData()</code><br>
	 * <i>native declaration : line 726</i>
	 */
	native public static Pointer<LinkAPILibrary.LINKAPI_LINKED_MEMORY> getData();
}
