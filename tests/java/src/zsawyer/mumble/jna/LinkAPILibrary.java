/* Copyright (C) 2013, zsawyer <zsawyer@users.sourceforge.net>

 All rights reserved.

 Redistribution and use in source and binary forms, with or without
 modification, are permitted provided that the following conditions
 are met:

 - Redistributions of source code must retain the above copyright notice,
 this list of conditions and the following disclaimer.
 - Redistributions in binary form must reproduce the above copyright notice,
 this list of conditions and the following disclaimer in the documentation
 and/or other materials provided with the distribution.
 - Neither the name of the Mumble Developers nor the names of its
 contributors may be used to endorse or promote products derived from this
 software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
 CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package zsawyer.mumble.jna;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Structure;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.Arrays;
import java.util.List;

/**
 * JNA Wrapper for library <b>LinkAPI</b><br>
 * This file was autogenerated by <a
 * href="http://jnaerator.googlecode.com/">JNAerator</a>, a tool written by <a
 * href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few
 * opensource projects.</a> For help, please visit <a
 * href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a
 * href="http://jna.dev.java.net/">JNA</a>.
 *
 *
 * The wrapped library is a generic interface to provide positional audio
 * information to mumble which depends on the "Mumble Link Plugin" ("Link")
 * v1.2.0
 *
 * Note that all update...(...) methods will increment uiTick and reinitialize
 * the memory structure if the lock was lost (unlinked).
 *
 * CONCURRENCY WARNING:
 * All methods are non-synchronized! Race conditions are likely to happen.
 * Especially when calling getters in sequence, data writes to the shared memory
 * can happen in between the read sequence.
 * DO NOT rely upon a sequence of functions to work on the same "uiTick".
 * Currently the memory does not provide the means to synchronize and ensure
 * that all data are coherently relating to the same tick/each other.
 * The context_len is not guaranteed to belong to the context retrieved
 * immediately before or after thereof.
 *
 *
 * For more information about the different data that can be updated see
 * http://mumble.sourceforge.net/Link
 *
 *
 * @author cleaned up by zsawyer, 2013
 */
public interface LinkAPILibrary extends Library {

	public static final String JNA_LIBRARY_NAME = "LinkAPI";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.
			getInstance(LinkAPILibrary.JNA_LIBRARY_NAME);
	public static final LinkAPILibrary INSTANCE = (LinkAPILibrary) Native.
			loadLibrary(LinkAPILibrary.JNA_LIBRARY_NAME, LinkAPILibrary.class);

	/**
	 * error codes hinting at the root cause of a failure
	 */
	public static interface LINKAPI_ERROR_CODE {

		/**
		 * no error<br>
		 * <i>native declaration : line 126</i>
		 */
		public static final int LINKAPI_ERROR_CODE_NO_ERROR = 0;
		/**
		 * no handle to the shared memory structure was received<br>
		 * <i>native declaration : line 128</i>
		 */
		public static final int LINKAPI_ERROR_CODE_NO_HANDLE = 1;
		/**
		 * no structure could be initialized<br>
		 * <i>native declaration : line 130</i>
		 */
		public static final int LINKAPI_ERROR_CODE_NO_STRUCTURE = 2;
		/**
		 * the shared memory was not initialized<br>
		 * <i>native declaration : line 132</i>
		 */
		public static final int LINKAPI_ERROR_CODE_NO_MEMORY_WAS_INITIALIZED = 3;
		/**
		 * the provided context length was out of bounds<br>
		 * <i>native declaration : line 134</i>
		 */
		public static final int LINKAPI_ERROR_CODE_CONTEXT_LENGTH_EXCEEDED = 4;
	};
	public static final int LINKAPI_MAX_IDENTITY_LENGTH = 256;
	public static final int LINKAPI_MAX_NAME_LENGTH = 256;
	public static final int LINKAPI_MAX_CONTEXT_LENGTH = 256;
	public static final int LINKAPI_VERSION_UNLINK = 0;
	public static final int LINKAPI_MAX_DESCRIPTION_LENGTH = 2048;

	public static class LINKAPI_LINKED_MEMORY extends Structure {

		public int version;
		public int tick;
		/** C type : float[3] */
		public float[] avatarPosition = new float[3];
		/** C type : float[3] */
		public float[] avatarFront = new float[3];
		/** C type : float[3] */
		public float[] avatarTop = new float[3];
		/** C type : wchar_t[256] */
		public char[] name = new char[256];
		/** C type : float[3] */
		public float[] cameraPosition = new float[3];
		/** C type : float[3] */
		public float[] cameraFront = new float[3];
		/** C type : float[3] */
		public float[] cameraTop = new float[3];
		/** C type : wchar_t[256] */
		public char[] identity = new char[256];
		public int contextLength;
		/** C type : unsigned char[256] */
		public byte[] context = new byte[256];
		/** C type : wchar_t[2048] */
		public char[] description = new char[2048];

		public LINKAPI_LINKED_MEMORY() {
			super();
		}

		protected List<?> getFieldOrder() {
			return Arrays.asList("version", "tick", "avatarPosition",
					"avatarFront", "avatarTop", "name", "cameraPosition",
					"cameraFront", "cameraTop", "identity", "contextLength",
					"context", "description");
		}

		public static class ByReference extends LINKAPI_LINKED_MEMORY implements
				Structure.ByReference {

		};

		public static class ByValue extends LINKAPI_LINKED_MEMORY implements
				Structure.ByValue {

		};
	};

	/**
	 * initialize the linked memory
	 * and set the name and description
	 *
	 * it corresponds to initMumble() defined here: http://mumble.sourceforge.net/Link
	 * but also sets the name and description as this should only needed to be
	 * set once
	 *
	 * @param name	       the display name of the application which links with mumble (i.e. L"TestLink")
	 * @param description	a text stating the purpose of this link
	 * @param version	    no description available (this should usually be set to 2)
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE initialize(const wchar_t[256], const wchar_t[2048], int)</code><br>
	 * <i>native declaration : line 152</i>
	 */
	int initialize(char name[], char description[], int version);

	/**
	 * forcefully unlinks the plugin instantly
	 *
	 * this function directly circumvents the timeout wait of the link plugin
	 *
	 * this effect is undone when calling a commit...(...)-function or
	 * {@link #initialize(char[], char[], int) }
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE unlinkMumble()</code><br>
	 * <i>native declaration : line 168</i>
	 */
	int unlinkMumble();

	/**
	 * Notifies the plugin that the data is up-to-date. commit...(...)-functions
	 * call this method at the end.
	 *
	 * This is to prevent a timeout which causes the plugin to automatically unlink.
	 * It will also re-link if the link has previously been lost ("relock").
	 *
	 * @return	an error code, see {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commit()</code><br>
	 * <i>native declaration : line 180</i>
	 */
	int commit();

	/**
	 * sets and commits the identity
	 *
	 * Notice: The identity does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a game.
	 *
	 * see {@link #setIdentity(char[]) } for details
	 *
	 * @param identity	unique id of the user in a given context
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitIdentity(const wchar_t[256])</code><br>
	 * <i>native declaration : line 195</i>
	 */
	int commitIdentity(char identity[]);

	/**
	 * get the client's identity
	 *
	 * see {@link #setIdentity(char[]) } for details
	 *
	 * @param destination the client's identity
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getIdentity(wchar_t[256])</code><br>
	 * <i>native declaration : line 206</i>
	 */
	int getIdentity(CharBuffer destination);

	/**
	 * set the identity only
	 *
	 * Notice: The identity does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a game.
	 *
	 * Identity should contain a string which uniquely identifies the player in
	 * the given context. This is usually satisfied by the in-game player name
	 * or the players ID (player-/connection-ID on the server or a global ID).
	 *
	 * Additionally the identity can contain any additional information about
	 * the player that might be interesting for the mumble server.
	 *
	 * We recommend using an easily parseable format like JSON or CSV for
	 * encoding the information but this is up to the game. Remember that the
	 * link structures only allow for limited characters of identity data.
	 *
	 * @param identity	unique id of the user in a given context
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setIdentity(const wchar_t[256])</code><br>
	 * <i>native declaration : line 230</i>
	 */
	int setIdentity(char identity[]);

	/**
	 * sets and commits the context
	 *
	 * Notice: The context does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a game.
	 *
	 * see {@link #setContext(byte[], int) } for details
	 *
	 * @param context	      a generic context
	 * @param contextLength	the length of the context (number of array elements)
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitContext(const unsigned char*, int)</code><br>
	 * <i>native declaration : line 246</i>
	 */
	int commitContext(byte context[], int contextLength);

	/**
	 * the length of the context (number of valid array elements retrieved).
	 *
	 * This cannot exceed {@link #LINKAPI_MAX_CONTEXT_LENGTH}.
	 *
	 * @param destination the length of the current context
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getContextLen(int*)</code><br>
	 * <i>native declaration : line 260</i>
	 */
	int getContextLen(IntBuffer destination);

	/**
	 * getter for the client's context
	 *
	 * see {@link #setContext(byte[], int) } for details
	 *
	 * @param destinationForContext      the client's context
	 * @param destinationForActualLength the length of the usable context
	 * @param maxContextLength           the maximum length to write to at the destination
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getContext(unsigned char*, int*, int)</code><br>
	 * <i>native declaration : line 273</i>
	 */
	int getContext(ByteBuffer destinationForContext,
			IntBuffer destinationForActualLength, int maxContextLength);

	/**
	 * sets the context
	 *
	 * Notice: The context does not need to be updated every single frame. It
	 * shouldn't change more than a few times per second if at all during a game.
	 *
	 * The context string is used to determine which users on a Mumble server
	 * should hear each other positionally. If context between two mumble user
	 * does not match the positional audio data is stripped server-side and
	 * voice will be received as non-positional.
	 *
	 * Accordingly the context should only match for players on the same server
	 * in the same game on the same map. Whether to include things like team in
	 * this string depends on the game itself. When in doubt err on the side of
	 * including less. This gives more flexibility later on.
	 *
	 * @param context	      a generic context
	 * @param contextLength	the length of the context (number of array elements)
	 *                      {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setContext(const unsigned char*, int)</code><br>
	 * <i>native declaration : line 301</i>
	 */
	int setContext(byte context[], int contextLength);

	/**
	 * sets and commits the identity AND context
	 *
	 * Notice: The identity and/or context does not need to be updated every
	 * single frame. It shouldn't change more than a few times per second if at
	 * all during a game.
	 *
	 * see {@link #setIdentity(char[]) } and {@link #setContext(byte[], int) } for detailed information
	 *
	 * @param identity	     unique id of the user
	 * @param context	      a generic context
	 * @param contextLength	the length of the context (number of array elements)
	 *                      {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitIdentityAndContext(const wchar_t[256], const unsigned char*, int)</code><br>
	 * <i>native declaration : line 322</i>
	 */
	int commitIdentityAndContext(char identity[], byte context[],
			int contextLength);

	/**
	 * sets the identity AND context
	 *
	 * Notice: The identity and/or context does not need to be updated every
	 * single frame. It shouldn't change more than a few times per second if at
	 * all during a game.
	 *
	 * see {@link #setIdentity(char[]) } and {@link #setContext(byte[], int) } for detailed informations
	 *
	 * @param identity	     unique id of the user
	 * @param context	      a generic context
	 * @param contextLength	the length of the context (number of array elements)
	 *                      {@link #LINKAPI_MAX_CONTEXT_LENGTH} limits this number
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setIdentityAndContext(const wchar_t[256], const unsigned char*, int)</code><br>
	 * <i>native declaration : line 344</i>
	 */
	int setIdentityAndContext(char identity[], byte context[], int contextLength);

	/**
	 * sets and commits the display name of the application currently linked
	 * with mumble
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * see {@link #setName(char[]) } for details
	 *
	 * @param name	the display name of the application which links with mumble (i.e. L"TestLink")
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitName(const wchar_t[256])</code><br>
	 * <i>native declaration : line 363</i>
	 */
	int commitName(char name[]);

	/**
	 * the display name of the application currently linked with mumble
	 *
	 * see {@link #setName(char[]) } for details
	 *
	 * @param destination for the application name
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getName(wchar_t[256])</code><br>
	 * <i>native declaration : line 374</i>
	 */
	int getName(CharBuffer destination);

	/**
	 * sets only the display name of the application currently linked with mumble
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * this name is shown in the mumble interface to indicate which plugin's
	 * positional audio is being used (i.e. used for the "XXX linked." message
	 * in the mumble log)
	 *
	 * @param name	the display name of the application which links with mumble (i.e. L"TestLink")
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setName(const wchar_t[256])</code><br>
	 * <i>native declaration : line 391</i>
	 */
	int setName(char name[]);

	/**
	 * sets and commits the application's description
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * see {@link #setDescription(char[]) } for details
	 *
	 * @param description	a text stating the purpose of this link
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitDescription(const wchar_t[2048])</code><br>
	 * <i>native declaration : line 406</i>
	 */
	int commitDescription(char description[]);

	/**
	 * the linked application's description
	 *
	 * see {@link #setDescription(char[]) } for details
	 *
	 * @param destination a text stating the purpose of this link
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getDescription(wchar_t[2048])</code><br>
	 * <i>native declaration : line 417</i>
	 */
	int getDescription(CharBuffer destination);

	/**
	 * sets only the application's description
	 *
	 * Notice: This does not need to be updated every single frame. It shouldn't
	 * change at all during a game.
	 *
	 * this is the text to explain the plugin and its purpose
	 *
	 * @param description	a text stating the purpose of this link
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setDescription(const wchar_t[2048])</code><br>
	 * <i>native declaration : line 432</i>
	 */
	int setDescription(char description[]);

	/**
	 * updates and commits the avatar and camera vectors
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * @param avatarPosition	Position of the avatar.
	 * @param avatarFront	   Unit vector pointing out of the avatar's eyes.
	 * @param avatarTop	     Unit vector pointing out of the top of the avatar's head.
	 * @param cameraPosition	Position of the camera.
	 * @param cameraFront	   Unit vector pointing out of the camera's lense.
	 * @param cameraTop	     Unit vector pointing out of the camera's top.
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitVectors(const float[3], const float[3], const float[3], const float[3], const float[3], const float[3])</code><br>
	 * <i>native declaration : line 451</i>
	 */
	int commitVectors(float avatarPosition[], float avatarFront[],
			float avatarTop[], float cameraPosition[], float cameraFront[],
			float cameraTop[]);

	/**
	 * sets avatar and camera vectors
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * @param avatarPosition	Position of the avatar.
	 * @param avatarFront	   Unit vector pointing out of the avatar's eyes.
	 * @param avatarTop	     Unit vector pointing out of the top of the avatar's head.
	 * @param cameraPosition	Position of the camera.
	 * @param cameraFront	   Unit vector pointing out of the camera's lense.
	 * @param cameraTop	     Unit vector pointing out of the camera's top.
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setVectors(const float[3], const float[3], const float[3], const float[3], const float[3], const float[3])</code><br>
	 * <i>native declaration : line 475</i>
	 */
	int setVectors(float avatarPosition[], float avatarFront[],
			float avatarTop[], float cameraPosition[], float cameraFront[],
			float cameraTop[]);

	/**
	 * updates and commits avatar AND camera vectors with the same values
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * see {@link #setVectorsAvatarAsCamera(float[], float[], float[]) } for details
	 *
	 * @param avatarPosition	Position of the avatar and camera.
	 * @param avatarFront	   Unit vector pointing out of the camera/avatar's eyes.
	 * @param avatarTop	     Unit vector pointing out of the top of the avatar's head/camera's top.
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitVectorsAvatarAsCamera(const float[3], const float[3], const float[3])</code><br>
	 * <i>native declaration : line 498</i>
	 */
	int commitVectorsAvatarAsCamera(float avatarPosition[], float avatarFront[],
			float avatarTop[]);

	/**
	 * sets avatar AND camera vectors with the same values
	 *
	 * this simply reuses the given vectors for the camera
	 *
	 * short cut function to use when the camera of the game/program is not
	 * independent of the avatar
	 *
	 * Notice: Mumble fetches these values 50 times a second, so please update
	 * them every frame.
	 *
	 * see the respective single vector setters for details
	 *
	 * @param avatarPosition	Position of the avatar and camera.
	 * @param avatarFront	   Unit vector pointing out of the camera/avatar's eyes.
	 * @param avatarTop	     Unit vector pointing out of the top of the avatar's head/camera's top.
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setVectorsAvatarAsCamera(const float[3], const float[3], const float[3])</code><br>
	 * <i>native declaration : line 523</i>
	 */
	int setVectorsAvatarAsCamera(float avatarPosition[], float avatarFront[],
			float avatarTop[]);

	/**
	 * The position of the avatar
	 *
	 * location of the avatar or avatar's head where it is located in the 3D game world
	 *
	 * @param destination the 3D vector represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getAvatarPosition(float[3])</code><br>
	 * <i>native declaration : line 538</i>
	 */
	int getAvatarPosition(FloatBuffer destination);

	/**
	 * sets the position of the avatar
	 *
	 * location of the avatar or avatar's head where it is located in the 3D game world
	 *
	 * Using the head's position is preferred. This in particular applies when
	 * the head is not at the origin of the avatar model coordinate space. E.g. if
	 * the origin is at the feet of the model the sound will be perceived as
	 * coming from the feet instead of the head.
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setAvatarPosition(float, float, float)</code><br>
	 * <i>native declaration : line 556</i>
	 */
	int setAvatarPosition(float x, float y, float z);

	/**
	 * Unit vector pointing out of the avatar's eyes
	 *
	 * indicates the direction the avatar or avatar's head is pointing at
	 *
	 * @param destination the 3D vector (look vector) represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getAvatarFront(float[3])</code><br>
	 * <i>native declaration : line 568</i>
	 */
	int getAvatarFront(FloatBuffer destination);

	/**
	 * sets unit vector pointing out of the avatar's eyes
	 *
	 * indicates the direction the avatar or avatar's head is pointing at
	 *
	 * Note: this vector should be perpendicular to the top vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setAvatarFront(float, float, float)</code><br>
	 * <i>native declaration : line 583</i>
	 */
	int setAvatarFront(float x, float y, float z);

	/**
	 * Unit vector pointing out of the top of the avatar's head
	 *
	 * indicates the direction that the top of the avatar or
	 * avatar's head is pointing at
	 *
	 * @param destination the 3D vector (the avatar's up vector) represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getAvatarTop(float[3])</code><br>
	 * <i>native declaration : line 596</i>
	 */
	int getAvatarTop(FloatBuffer destination);

	/**
	 * sets unit vector pointing out of the top of the avatar's head
	 *
	 * indicates the direction that the top of the avatar or
	 * avatar's head is pointing at
	 *
	 * Note: this vector should be perpendicular to the front vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setAvatarTop(float, float, float)</code><br>
	 * <i>native declaration : line 612</i>
	 */
	int setAvatarTop(float x, float y, float z);

	/**
	 * The position of the camera
	 *
	 * location of the camera where it is located in the 3D game world
	 *
	 * @param destination the 3D vector represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getCameraPosition(float[3])</code><br>
	 * <i>native declaration : line 624</i>
	 */
	int getCameraPosition(FloatBuffer destination);

	/**
	 * sets the position of the camera
	 *
	 * location of the camera where it is located in the 3D game world
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setCameraPosition(float, float, float)</code><br>
	 * <i>native declaration : line 637</i>
	 */
	int setCameraPosition(float x, float y, float z);

	/**
	 * Unit vector pointing out of the front/lens of the camera
	 *
	 * indicates the direction the camera is pointing at
	 *
	 * @param destination the 3D vector (look vector) represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getCameraFront(float[3])</code><br>
	 * <i>native declaration : line 649</i>
	 */
	int getCameraFront(FloatBuffer destination);

	/**
	 * sets unit vector pointing out of the front/lens of the camera
	 *
	 * indicates the direction the camera is pointing at
	 *
	 * Note: this vector should be perpendicular to the top vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setCameraFront(float, float, float)</code><br>
	 * <i>native declaration : line 664</i>
	 */
	int setCameraFront(float x, float y, float z);

	/**
	 * Unit vector pointing out of the top of the camera
	 *
	 * indicates the direction that the top of the camera is pointing at
	 *
	 * @param destination the 3D vector (the camera's up vector) represented by a float array
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getCameraTop(float[3])</code><br>
	 * <i>native declaration : line 676</i>
	 */
	int getCameraTop(FloatBuffer destination);

	/**
	 * sets unit vector pointing out of the top of the camera
	 *
	 * indicates the direction that the top of the camera is pointing at
	 *
	 * Note: this vector should be perpendicular to the front vector
	 *
	 * @param x the magnitude of the x basis vector
	 * @param y the magnitude of the y basis vector
	 * @param z the magnitude of the z basis vector
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setCameraTop(float, float, float)</code><br>
	 * <i>native declaration : line 691</i>
	 */
	int setCameraTop(float x, float y, float z);

	/**
	 * Original signature : <code>LINKAPI_ERROR_CODE getVersion(int*)</code><br>
	 * <i>native declaration : line 694</i>
	 */
	int getVersion(IntBuffer destination);

	/**
	 * Original signature : <code>LINKAPI_ERROR_CODE setVersion(int)</code><br>
	 * <i>native declaration : line 697</i>
	 */
	int setVersion(int version);

	/**
	 * Original signature : <code>LINKAPI_ERROR_CODE commitVersion(int)</code><br>
	 * <i>native declaration : line 700</i>
	 */
	int commitVersion(int version);

	/**
	 * tick counter which is used to tell if updates to the shared memory occurred
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * @param destination the current tick number
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getTick(DWORD*)</code><br>
	 * <i>native declaration : line 713</i>
	 */
	int getTick(IntBuffer destination);

	/**
	 * sets the tick counter which is used to tell if updates to the shared memory occurred
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * If the plugin is already unlinked updating this value does not re-link,
	 * for this to happen version needs to be updated too.
	 * Use {@link #commitTick(int) } to clean-up the linked memory and
	 * enforce a re-link.
	 *
	 * @param tick the tick number to set
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setTick(DWORD)</code><br>
	 * <i>native declaration : line 730</i>
	 */
	int setTick(int tick);

	/**
	 * set and commit the tick counter which is used to tell if updates to the
	 * shared memory occurred
	 *
	 * If this number stays the same the rest of the shared memory is not read
	 * by the link plugin and it will unlink after a certain timeout.
	 *
	 * @param tick the tick number to set
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE commitTick(DWORD)</code><br>
	 * <i>native declaration : line 743</i>
	 */
	int commitTick(int tick);

	/**
	 * directly manipulate the entire linked memory at once
	 *
	 * IMPORTANT: Note that you should also update tick yourself, else a timeout
	 * will occur and your data will not be read. Subsequently calling the
	 * commit()-function once will not help when tick is always set to the same
	 * value.
	 *
	 * Notice: Parts of this does not need to be updated every single frame.
	 * Please use the more directly appropriate commit...(...) functions instead.
	 *
	 * @param source data structure which is to be copied
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE setData(const LINKAPI_LINKED_MEMORY*)</code><br>
	 * <i>native declaration : line 761</i>
	 */
	int setData(LinkAPILibrary.LINKAPI_LINKED_MEMORY source);

	/**
	 * the entire shared memory for direct access
	 *
	 * @param destination a pointer to a copy target of the shared memory structure
	 *
	 * @return	an error code {@link LINKAPI_ERROR_CODE}
	 */
	/*
	 * Original signature : <code>LINKAPI_ERROR_CODE getData(LINKAPI_LINKED_MEMORY*)</code><br>
	 * <i>native declaration : line 771</i>
	 */
	int getData(LinkAPILibrary.LINKAPI_LINKED_MEMORY destination);
}
